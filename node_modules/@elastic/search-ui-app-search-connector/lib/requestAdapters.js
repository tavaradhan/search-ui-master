"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.adaptRequest = adaptRequest;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _excluded = ["name"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function removeName(v) {
  if (v && v.name) {
    // eslint-disable-next-line
    var name = v.name,
        rest = (0, _objectWithoutProperties2.default)(v, _excluded);
    return _objectSpread({}, rest);
  }

  return v;
}

function rollup(f) {
  var values = f.values.map(removeName).map(function (v) {
    return (0, _defineProperty2.default)({}, f.field, v);
  });
  return (0, _defineProperty2.default)({}, f.type || "any", values);
}

function adaptFilters(filters) {
  if (!filters || filters.length === 0) return {};
  var all = filters.map(rollup);
  return {
    all: all
  };
}

function getSort(sortDirection, sortField, sortList) {
  if (sortList && sortList.length) {
    return sortList.map(function (sortItem) {
      return (0, _defineProperty2.default)({}, sortItem.field, sortItem.direction);
    });
  } else if (sortField && sortDirection) {
    return (0, _defineProperty2.default)({}, sortField, sortDirection);
  } else {
    return undefined;
  }
}

function adaptRequest(request) {
  var current = request.current,
      resultsPerPage = request.resultsPerPage,
      searchTerm = request.searchTerm,
      sortDirection = request.sortDirection,
      sortField = request.sortField,
      sortList = request.sortList;
  var sort = getSort(sortDirection, sortField, sortList);
  return _objectSpread(_objectSpread({
    query: searchTerm
  }, sort !== undefined && {
    sort: sort
  }), {}, {
    page: _objectSpread(_objectSpread({}, resultsPerPage !== undefined && {
      size: resultsPerPage
    }), current !== undefined && {
      current: current
    }),
    filters: adaptFilters(request.filters)
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9yZXF1ZXN0QWRhcHRlcnMuanMiXSwibmFtZXMiOlsicmVtb3ZlTmFtZSIsInYiLCJuYW1lIiwicmVzdCIsInJvbGx1cCIsImYiLCJ2YWx1ZXMiLCJtYXAiLCJmaWVsZCIsInR5cGUiLCJhZGFwdEZpbHRlcnMiLCJmaWx0ZXJzIiwibGVuZ3RoIiwiYWxsIiwiZ2V0U29ydCIsInNvcnREaXJlY3Rpb24iLCJzb3J0RmllbGQiLCJzb3J0TGlzdCIsInNvcnRJdGVtIiwiZGlyZWN0aW9uIiwidW5kZWZpbmVkIiwiYWRhcHRSZXF1ZXN0IiwicmVxdWVzdCIsImN1cnJlbnQiLCJyZXN1bHRzUGVyUGFnZSIsInNlYXJjaFRlcm0iLCJzb3J0IiwicXVlcnkiLCJwYWdlIiwic2l6ZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLFNBQVNBLFVBQVQsQ0FBb0JDLENBQXBCLEVBQXVCO0FBQ3JCLE1BQUlBLENBQUMsSUFBSUEsQ0FBQyxDQUFDQyxJQUFYLEVBQWlCO0FBQ2Y7QUFDQSxRQUFRQSxJQUFSLEdBQTBCRCxDQUExQixDQUFRQyxJQUFSO0FBQUEsUUFBaUJDLElBQWpCLDBDQUEwQkYsQ0FBMUI7QUFDQSw2QkFDS0UsSUFETDtBQUdEOztBQUVELFNBQU9GLENBQVA7QUFDRDs7QUFFRCxTQUFTRyxNQUFULENBQWdCQyxDQUFoQixFQUFtQjtBQUNqQixNQUFNQyxNQUFNLEdBQUdELENBQUMsQ0FBQ0MsTUFBRixDQUFTQyxHQUFULENBQWFQLFVBQWIsRUFBeUJPLEdBQXpCLENBQTZCLFVBQUFOLENBQUM7QUFBQSw2Q0FDMUNJLENBQUMsQ0FBQ0csS0FEd0MsRUFDaENQLENBRGdDO0FBQUEsR0FBOUIsQ0FBZjtBQUlBLDJDQUNHSSxDQUFDLENBQUNJLElBQUYsSUFBVSxLQURiLEVBQ3FCSCxNQURyQjtBQUdEOztBQUVELFNBQVNJLFlBQVQsQ0FBc0JDLE9BQXRCLEVBQStCO0FBQzdCLE1BQUksQ0FBQ0EsT0FBRCxJQUFZQSxPQUFPLENBQUNDLE1BQVIsS0FBbUIsQ0FBbkMsRUFBc0MsT0FBTyxFQUFQO0FBQ3RDLE1BQU1DLEdBQUcsR0FBR0YsT0FBTyxDQUFDSixHQUFSLENBQVlILE1BQVosQ0FBWjtBQUNBLFNBQU87QUFDTFMsSUFBQUEsR0FBRyxFQUFIQTtBQURLLEdBQVA7QUFHRDs7QUFFRCxTQUFTQyxPQUFULENBQWlCQyxhQUFqQixFQUFnQ0MsU0FBaEMsRUFBMkNDLFFBQTNDLEVBQXFEO0FBQ25ELE1BQUlBLFFBQVEsSUFBSUEsUUFBUSxDQUFDTCxNQUF6QixFQUFpQztBQUMvQixXQUFPSyxRQUFRLENBQUNWLEdBQVQsQ0FBYSxVQUFBVyxRQUFRO0FBQUEsK0NBQVFBLFFBQVEsQ0FBQ1YsS0FBakIsRUFBeUJVLFFBQVEsQ0FBQ0MsU0FBbEM7QUFBQSxLQUFyQixDQUFQO0FBQ0QsR0FGRCxNQUVPLElBQUlILFNBQVMsSUFBSUQsYUFBakIsRUFBZ0M7QUFDckMsNkNBQ0dDLFNBREgsRUFDZUQsYUFEZjtBQUdELEdBSk0sTUFJQTtBQUNMLFdBQU9LLFNBQVA7QUFDRDtBQUNGOztBQUVNLFNBQVNDLFlBQVQsQ0FBc0JDLE9BQXRCLEVBQStCO0FBQ3BDLE1BQ0VDLE9BREYsR0FPSUQsT0FQSixDQUNFQyxPQURGO0FBQUEsTUFFRUMsY0FGRixHQU9JRixPQVBKLENBRUVFLGNBRkY7QUFBQSxNQUdFQyxVQUhGLEdBT0lILE9BUEosQ0FHRUcsVUFIRjtBQUFBLE1BSUVWLGFBSkYsR0FPSU8sT0FQSixDQUlFUCxhQUpGO0FBQUEsTUFLRUMsU0FMRixHQU9JTSxPQVBKLENBS0VOLFNBTEY7QUFBQSxNQU1FQyxRQU5GLEdBT0lLLE9BUEosQ0FNRUwsUUFORjtBQVNBLE1BQU1TLElBQUksR0FBR1osT0FBTyxDQUFDQyxhQUFELEVBQWdCQyxTQUFoQixFQUEyQkMsUUFBM0IsQ0FBcEI7QUFDQTtBQUNFVSxJQUFBQSxLQUFLLEVBQUVGO0FBRFQsS0FFTUMsSUFBSSxLQUFLTixTQUFULElBQXNCO0FBQUVNLElBQUFBLElBQUksRUFBSkE7QUFBRixHQUY1QjtBQUdFRSxJQUFBQSxJQUFJLGtDQUNFSixjQUFjLEtBQUtKLFNBQW5CLElBQWdDO0FBQUVTLE1BQUFBLElBQUksRUFBRUw7QUFBUixLQURsQyxHQUVFRCxPQUFPLEtBQUtILFNBQVosSUFBeUI7QUFBRUcsTUFBQUEsT0FBTyxFQUFQQTtBQUFGLEtBRjNCLENBSE47QUFPRVosSUFBQUEsT0FBTyxFQUFFRCxZQUFZLENBQUNZLE9BQU8sQ0FBQ1gsT0FBVDtBQVB2QjtBQVNEIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gcmVtb3ZlTmFtZSh2KSB7XG4gIGlmICh2ICYmIHYubmFtZSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICAgIGNvbnN0IHsgbmFtZSwgLi4ucmVzdCB9ID0gdjtcbiAgICByZXR1cm4ge1xuICAgICAgLi4ucmVzdFxuICAgIH07XG4gIH1cblxuICByZXR1cm4gdjtcbn1cblxuZnVuY3Rpb24gcm9sbHVwKGYpIHtcbiAgY29uc3QgdmFsdWVzID0gZi52YWx1ZXMubWFwKHJlbW92ZU5hbWUpLm1hcCh2ID0+ICh7XG4gICAgW2YuZmllbGRdOiB2XG4gIH0pKTtcblxuICByZXR1cm4ge1xuICAgIFtmLnR5cGUgfHwgXCJhbnlcIl06IHZhbHVlc1xuICB9O1xufVxuXG5mdW5jdGlvbiBhZGFwdEZpbHRlcnMoZmlsdGVycykge1xuICBpZiAoIWZpbHRlcnMgfHwgZmlsdGVycy5sZW5ndGggPT09IDApIHJldHVybiB7fTtcbiAgY29uc3QgYWxsID0gZmlsdGVycy5tYXAocm9sbHVwKTtcbiAgcmV0dXJuIHtcbiAgICBhbGxcbiAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0U29ydChzb3J0RGlyZWN0aW9uLCBzb3J0RmllbGQsIHNvcnRMaXN0KSB7XG4gIGlmIChzb3J0TGlzdCAmJiBzb3J0TGlzdC5sZW5ndGgpIHtcbiAgICByZXR1cm4gc29ydExpc3QubWFwKHNvcnRJdGVtID0+ICh7IFtzb3J0SXRlbS5maWVsZF06IHNvcnRJdGVtLmRpcmVjdGlvbiB9KSk7XG4gIH0gZWxzZSBpZiAoc29ydEZpZWxkICYmIHNvcnREaXJlY3Rpb24pIHtcbiAgICByZXR1cm4ge1xuICAgICAgW3NvcnRGaWVsZF06IHNvcnREaXJlY3Rpb25cbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFkYXB0UmVxdWVzdChyZXF1ZXN0KSB7XG4gIGNvbnN0IHtcbiAgICBjdXJyZW50LFxuICAgIHJlc3VsdHNQZXJQYWdlLFxuICAgIHNlYXJjaFRlcm0sXG4gICAgc29ydERpcmVjdGlvbixcbiAgICBzb3J0RmllbGQsXG4gICAgc29ydExpc3RcbiAgfSA9IHJlcXVlc3Q7XG5cbiAgY29uc3Qgc29ydCA9IGdldFNvcnQoc29ydERpcmVjdGlvbiwgc29ydEZpZWxkLCBzb3J0TGlzdCk7XG4gIHJldHVybiB7XG4gICAgcXVlcnk6IHNlYXJjaFRlcm0sXG4gICAgLi4uKHNvcnQgIT09IHVuZGVmaW5lZCAmJiB7IHNvcnQgfSksXG4gICAgcGFnZToge1xuICAgICAgLi4uKHJlc3VsdHNQZXJQYWdlICE9PSB1bmRlZmluZWQgJiYgeyBzaXplOiByZXN1bHRzUGVyUGFnZSB9KSxcbiAgICAgIC4uLihjdXJyZW50ICE9PSB1bmRlZmluZWQgJiYgeyBjdXJyZW50IH0pXG4gICAgfSxcbiAgICBmaWx0ZXJzOiBhZGFwdEZpbHRlcnMocmVxdWVzdC5maWx0ZXJzKVxuICB9O1xufVxuIl19