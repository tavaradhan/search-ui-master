import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["facets", "filters"],
    _excluded2 = ["searchKey", "engineName", "hostIdentifier", "beforeSearchCall", "beforeAutocompleteResultsCall", "beforeAutocompleteSuggestionsCall", "endpointBase"],
    _excluded3 = ["current", "filters", "resultsPerPage", "sortDirection", "sortField", "sortList"],
    _excluded4 = ["query"],
    _excluded5 = ["current", "filters", "resultsPerPage", "sortDirection", "sortField", "sortList"],
    _excluded6 = ["query"];
import _regeneratorRuntime from "@babel/runtime/regenerator";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import * as ElasticAppSearch from "@elastic/app-search-javascript";
import { adaptResponse } from "./responseAdapter";
import { adaptRequest } from "./requestAdapters";
import buildResponseAdapterOptions from "./buildResponseAdapterOptions"; // The API will error out if empty facets or filters objects
// are sent.

function removeEmptyFacetsAndFilters(options) {
  var facets = options.facets,
      filters = options.filters,
      rest = _objectWithoutProperties(options, _excluded);

  return _objectSpread(_objectSpread(_objectSpread({}, facets && Object.entries(facets).length > 0 && {
    facets: facets
  }), filters && Object.entries(filters).length > 0 && {
    filters: filters
  }), rest);
}

var AppSearchAPIConnector = /*#__PURE__*/function () {
  /**
   * @callback next
   * @param {Object} updatedQueryOptions The options to send to the API
   */

  /**
   * @callback hook
   * @param {Object} queryOptions The options that are about to be sent to the API
   * @param {next} next The options that are about to be sent to the API
   */

  /**
   * @typedef Options
   * @param {string} searchKey Credential found in your App Search Dashboard
   * @param {string} engineName Engine to query, found in your App Search Dashboard
   * @param {string} hostIdentifier Credential found in your App Search Dashboard
   *  Useful when proxying the Swiftype API or developing against a local API server.
   * @param {hook} beforeSearchCall=(queryOptions,next)=>next(queryOptions) A hook to amend query options before the request is sent to the
   *   API in a query on an "onSearch" event.
   * @param {hook} beforeAutocompleteResultsCall=(queryOptions,next)=>next(queryOptions) A hook to amend query options before the request is sent to the
   *   API in a "results" query on an "onAutocomplete" event.
   * @param {hook} beforeAutocompleteSuggestionsCall=(queryOptions,next)=>next(queryOptions) A hook to amend query options before the request is sent to
   * the API in a "suggestions" query on an "onAutocomplete" event.
   * @param {string} endpointBase="" Overrides the base of the Swiftype API endpoint completely.
   */

  /**
   * @param {Options} options
   */
  function AppSearchAPIConnector(_ref) {
    var searchKey = _ref.searchKey,
        engineName = _ref.engineName,
        hostIdentifier = _ref.hostIdentifier,
        _ref$beforeSearchCall = _ref.beforeSearchCall,
        beforeSearchCall = _ref$beforeSearchCall === void 0 ? function (queryOptions, next) {
      return next(queryOptions);
    } : _ref$beforeSearchCall,
        _ref$beforeAutocomple = _ref.beforeAutocompleteResultsCall,
        beforeAutocompleteResultsCall = _ref$beforeAutocomple === void 0 ? function (queryOptions, next) {
      return next(queryOptions);
    } : _ref$beforeAutocomple,
        _ref$beforeAutocomple2 = _ref.beforeAutocompleteSuggestionsCall,
        beforeAutocompleteSuggestionsCall = _ref$beforeAutocomple2 === void 0 ? function (queryOptions, next) {
      return next(queryOptions);
    } : _ref$beforeAutocomple2,
        _ref$endpointBase = _ref.endpointBase,
        endpointBase = _ref$endpointBase === void 0 ? "" : _ref$endpointBase,
        rest = _objectWithoutProperties(_ref, _excluded2);

    _classCallCheck(this, AppSearchAPIConnector);

    if (!engineName || !(hostIdentifier || endpointBase)) {
      throw Error("hostIdentifier or endpointBase, and engineName are required");
    }

    this.client = ElasticAppSearch.createClient(_objectSpread(_objectSpread(_objectSpread({}, endpointBase && {
      endpointBase: endpointBase
    }), hostIdentifier && {
      hostIdentifier: hostIdentifier
    }), {}, {
      apiKey: searchKey,
      engineName: engineName
    }, rest));
    this.beforeSearchCall = beforeSearchCall;
    this.beforeAutocompleteResultsCall = beforeAutocompleteResultsCall;
    this.beforeAutocompleteSuggestionsCall = beforeAutocompleteSuggestionsCall;
  }

  _createClass(AppSearchAPIConnector, [{
    key: "onResultClick",
    value: function onResultClick(_ref2) {
      var query = _ref2.query,
          documentId = _ref2.documentId,
          requestId = _ref2.requestId,
          _ref2$tags = _ref2.tags,
          tags = _ref2$tags === void 0 ? [] : _ref2$tags;
      tags = tags.concat("results");
      return this.client.click({
        query: query,
        documentId: documentId,
        requestId: requestId,
        tags: tags
      });
    }
  }, {
    key: "onAutocompleteResultClick",
    value: function onAutocompleteResultClick(_ref3) {
      var query = _ref3.query,
          documentId = _ref3.documentId,
          requestId = _ref3.requestId,
          _ref3$tags = _ref3.tags,
          tags = _ref3$tags === void 0 ? [] : _ref3$tags;
      tags = tags.concat("autocomplete");
      return this.client.click({
        query: query,
        documentId: documentId,
        requestId: requestId,
        tags: tags
      });
    }
  }, {
    key: "onSearch",
    value: function () {
      var _onSearch = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(state, queryConfig) {
        var _this = this;

        var current, filters, resultsPerPage, sortDirection, sortField, sortList, restOfQueryConfig, _adaptRequest, query, optionsFromState, withQueryConfigOptions, options;

        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                current = queryConfig.current, filters = queryConfig.filters, resultsPerPage = queryConfig.resultsPerPage, sortDirection = queryConfig.sortDirection, sortField = queryConfig.sortField, sortList = queryConfig.sortList, restOfQueryConfig = _objectWithoutProperties(queryConfig, _excluded3);
                _adaptRequest = adaptRequest(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread(_objectSpread({}, state), current !== undefined && {
                  current: current
                }), filters !== undefined && {
                  filters: filters
                }), resultsPerPage !== undefined && {
                  resultsPerPage: resultsPerPage
                }), sortDirection !== undefined && {
                  sortDirection: sortDirection
                }), sortField !== undefined && {
                  sortField: sortField
                }), sortList !== undefined && {
                  sortList: sortList
                })), query = _adaptRequest.query, optionsFromState = _objectWithoutProperties(_adaptRequest, _excluded4);
                withQueryConfigOptions = _objectSpread(_objectSpread({}, restOfQueryConfig), optionsFromState);
                options = _objectSpread({}, removeEmptyFacetsAndFilters(withQueryConfigOptions));
                return _context2.abrupt("return", this.beforeSearchCall(options, /*#__PURE__*/function () {
                  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(newOptions) {
                    var response;
                    return _regeneratorRuntime.wrap(function _callee$(_context) {
                      while (1) {
                        switch (_context.prev = _context.next) {
                          case 0:
                            _context.next = 2;
                            return _this.client.search(query, newOptions);

                          case 2:
                            response = _context.sent;
                            return _context.abrupt("return", adaptResponse(response, buildResponseAdapterOptions(queryConfig)));

                          case 4:
                          case "end":
                            return _context.stop();
                        }
                      }
                    }, _callee);
                  }));

                  return function (_x3) {
                    return _ref4.apply(this, arguments);
                  };
                }()));

              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function onSearch(_x, _x2) {
        return _onSearch.apply(this, arguments);
      }

      return onSearch;
    }()
  }, {
    key: "onAutocomplete",
    value: function () {
      var _onAutocomplete = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(_ref5, queryConfig) {
        var _this2 = this;

        var searchTerm, autocompletedState, promises, _queryConfig$results, current, filters, resultsPerPage, sortDirection, sortField, sortList, restOfQueryConfig, _adaptRequest2, query, optionsFromState, withQueryConfigOptions, options, _options;

        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                searchTerm = _ref5.searchTerm;
                autocompletedState = {};
                promises = [];

                if (queryConfig.results) {
                  _queryConfig$results = queryConfig.results, current = _queryConfig$results.current, filters = _queryConfig$results.filters, resultsPerPage = _queryConfig$results.resultsPerPage, sortDirection = _queryConfig$results.sortDirection, sortField = _queryConfig$results.sortField, sortList = _queryConfig$results.sortList, restOfQueryConfig = _objectWithoutProperties(_queryConfig$results, _excluded5);
                  _adaptRequest2 = adaptRequest({
                    current: current,
                    searchTerm: searchTerm,
                    filters: filters,
                    resultsPerPage: resultsPerPage,
                    sortDirection: sortDirection,
                    sortField: sortField,
                    sortList: sortList
                  }), query = _adaptRequest2.query, optionsFromState = _objectWithoutProperties(_adaptRequest2, _excluded6);
                  withQueryConfigOptions = _objectSpread(_objectSpread({}, restOfQueryConfig), optionsFromState);
                  options = removeEmptyFacetsAndFilters(withQueryConfigOptions);
                  promises.push(this.beforeAutocompleteResultsCall(options, function (newOptions) {
                    return _this2.client.search(query, newOptions).then(function (response) {
                      autocompletedState.autocompletedResults = adaptResponse(response).results;
                      autocompletedState.autocompletedResultsRequestId = response.info.meta.request_id;
                    });
                  }));
                }

                if (queryConfig.suggestions) {
                  _options = queryConfig.suggestions;
                  promises.push(this.beforeAutocompleteSuggestionsCall(_options, function (newOptions) {
                    return _this2.client.querySuggestion(searchTerm, newOptions).then(function (response) {
                      autocompletedState.autocompletedSuggestions = response.results;
                      autocompletedState.autocompletedSuggestionsRequestId = response.meta.request_id;
                    });
                  }));
                }

                _context3.next = 7;
                return Promise.all(promises);

              case 7:
                return _context3.abrupt("return", autocompletedState);

              case 8:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function onAutocomplete(_x4, _x5) {
        return _onAutocomplete.apply(this, arguments);
      }

      return onAutocomplete;
    }()
  }]);

  return AppSearchAPIConnector;
}();

export default AppSearchAPIConnector;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,