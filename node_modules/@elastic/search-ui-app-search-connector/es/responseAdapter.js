import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["count", "value"],
    _excluded2 = ["type", "data"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function adaptation1AdaptFacetValue(facetValue) {
  var additionalFacetValueFieldsForField = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var hasValue = facetValue.hasOwnProperty("value");

  var count = facetValue.count,
      value = facetValue.value,
      rest = _objectWithoutProperties(facetValue, _excluded);

  return {
    count: count,
    value: hasValue ? value : _objectSpread(_objectSpread({}, rest), additionalFacetValueFieldsForField)
  };
}

function adaptation2AddLabelToFacet(fieldName, facet) {
  return _objectSpread({
    field: fieldName
  }, facet);
}

function adaptFacets(facets, _ref) {
  var _ref$additionalFacetV = _ref.additionalFacetValueFields,
      additionalFacetValueFields = _ref$additionalFacetV === void 0 ? {} : _ref$additionalFacetV;
  if (!facets || Object.keys(facets).length === 0) return facets;
  return Object.entries(facets).reduce(function (acc, _ref2) {
    var _ref3 = _slicedToArray(_ref2, 2),
        fieldName = _ref3[0],
        facet = _ref3[1];

    var adaptedFacet = facet.map(function (v) {
      var type = v.type,
          data = v.data,
          rest = _objectWithoutProperties(v, _excluded2);

      return adaptation2AddLabelToFacet(fieldName, _objectSpread({
        type: type,
        data: data.map(function (f) {
          return adaptation1AdaptFacetValue(f, additionalFacetValueFields[fieldName]);
        })
      }, rest));
    });
    return _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, fieldName, adaptedFacet));
  }, {});
}

function limitTo100pages(totalPages) {
  // We limit this to 100 pages since App Search currently cannot page past 100 pages
  return Math.min(totalPages, 100);
}

export function adaptResponse(response) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var facets = response.info.facets;
  var requestId = response.info.meta.request_id;
  var totalPages = response.info.meta.page && typeof response.info.meta.page.total_pages !== "undefined" ? limitTo100pages(response.info.meta.page.total_pages) : undefined;
  var totalResults = response.info.meta.page ? response.info.meta.page.total_results : undefined;
  return _objectSpread(_objectSpread(_objectSpread({}, facets && {
    facets: adaptFacets(facets, options)
  }), {}, {
    rawResponse: response,
    requestId: requestId,
    results: response.rawResults
  }, totalPages !== undefined && {
    totalPages: totalPages
  }), totalResults !== undefined && {
    totalResults: totalResults
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9yZXNwb25zZUFkYXB0ZXIuanMiXSwibmFtZXMiOlsiYWRhcHRhdGlvbjFBZGFwdEZhY2V0VmFsdWUiLCJmYWNldFZhbHVlIiwiYWRkaXRpb25hbEZhY2V0VmFsdWVGaWVsZHNGb3JGaWVsZCIsImhhc1ZhbHVlIiwiaGFzT3duUHJvcGVydHkiLCJjb3VudCIsInZhbHVlIiwicmVzdCIsImFkYXB0YXRpb24yQWRkTGFiZWxUb0ZhY2V0IiwiZmllbGROYW1lIiwiZmFjZXQiLCJmaWVsZCIsImFkYXB0RmFjZXRzIiwiZmFjZXRzIiwiYWRkaXRpb25hbEZhY2V0VmFsdWVGaWVsZHMiLCJPYmplY3QiLCJrZXlzIiwibGVuZ3RoIiwiZW50cmllcyIsInJlZHVjZSIsImFjYyIsImFkYXB0ZWRGYWNldCIsIm1hcCIsInYiLCJ0eXBlIiwiZGF0YSIsImYiLCJsaW1pdFRvMTAwcGFnZXMiLCJ0b3RhbFBhZ2VzIiwiTWF0aCIsIm1pbiIsImFkYXB0UmVzcG9uc2UiLCJyZXNwb25zZSIsIm9wdGlvbnMiLCJpbmZvIiwicmVxdWVzdElkIiwibWV0YSIsInJlcXVlc3RfaWQiLCJwYWdlIiwidG90YWxfcGFnZXMiLCJ1bmRlZmluZWQiLCJ0b3RhbFJlc3VsdHMiLCJ0b3RhbF9yZXN1bHRzIiwicmF3UmVzcG9uc2UiLCJyZXN1bHRzIiwicmF3UmVzdWx0cyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBLFNBQVNBLDBCQUFULENBQ0VDLFVBREYsRUFHRTtBQUFBLE1BREFDLGtDQUNBLHVFQURxQyxFQUNyQztBQUNBLE1BQU1DLFFBQVEsR0FBR0YsVUFBVSxDQUFDRyxjQUFYLENBQTBCLE9BQTFCLENBQWpCOztBQUNBLE1BQVFDLEtBQVIsR0FBa0NKLFVBQWxDLENBQVFJLEtBQVI7QUFBQSxNQUFlQyxLQUFmLEdBQWtDTCxVQUFsQyxDQUFlSyxLQUFmO0FBQUEsTUFBeUJDLElBQXpCLDRCQUFrQ04sVUFBbEM7O0FBQ0EsU0FBTztBQUNMSSxJQUFBQSxLQUFLLEVB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akIsVUFBVSxLQUFLWSxTQUFmLElBQTRCO0FBQUVaLElBQUFBLFVBQVUsRUFBVkE7QUFBRixHQUxsQyxHQU1NYSxZQUFZLEtBQUtELFNBQWpCLElBQThCO0FBQUVDLElBQUFBLFlBQVksRUFBWkE7QUFBRixHQU5wQztBQVFEIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gYWRhcHRhdGlvbjFBZGFwdEZhY2V0VmFsdWUoXG4gIGZhY2V0VmFsdWUsXG4gIGFkZGl0aW9uYWxGYWNldFZhbHVlRmllbGRzRm9yRmllbGQgPSB7fVxuKSB7XG4gIGNvbnN0IGhhc1ZhbHVlID0gZmFjZXRWYWx1ZS5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpO1xuICBjb25zdCB7IGNvdW50LCB2YWx1ZSwgLi4ucmVzdCB9ID0gZmFjZXRWYWx1ZTtcbiAgcmV0dXJuIHtcbiAgICBjb3VudCxcbiAgICB2YWx1ZTogaGFzVmFsdWVcbiAgICAgID8gdmFsdWVcbiAgICAgIDoge1xuICAgICAgICAgIC4uLnJlc3QsXG4gICAgICAgICAgLi4uYWRkaXRpb25hbEZhY2V0VmFsdWVGaWVsZHNGb3JGaWVsZFxuICAgICAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGFkYXB0YXRpb24yQWRkTGFiZWxUb0ZhY2V0KGZpZWxkTmFtZSwgZmFjZXQpIHtcbiAgcmV0dXJuIHtcbiAgICBmaWVsZDogZmllbGROYW1lLFxuICAgIC4uLmZhY2V0XG4gIH07XG59XG5cbmZ1bmN0aW9uIGFkYXB0RmFjZXRzKGZhY2V0cywgeyBhZGRpdGlvbmFsRmFjZXRWYWx1ZUZpZWxkcyA9IHt9IH0pIHtcbiAgaWYgKCFmYWNldHMgfHwgT2JqZWN0LmtleXMoZmFjZXRzKS5sZW5ndGggPT09IDApIHJldHVybiBmYWNldHM7XG5cbiAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKGZhY2V0cykucmVkdWNlKChhY2MsIFtmaWVsZE5hbWUsIGZhY2V0XSkgPT4ge1xuICAgIGNvbnN0IGFkYXB0ZWRGYWNldCA9IGZhY2V0Lm1hcCh2ID0+IHtcbiAgICAgIGNvbnN0IHsgdHlwZSwgZGF0YSwgLi4ucmVzdCB9ID0gdjtcbiAgICAgIHJldHVybiBhZGFwdGF0aW9uMkFkZExhYmVsVG9GYWNldChmaWVsZE5hbWUsIHtcbiAgICAgICAgdHlwZSxcbiAgICAgICAgZGF0YTogZGF0YS5tYXAoZiA9PlxuICAgICAgICAgIGFkYXB0YXRpb24xQWRhcHRGYWNldFZhbHVlKGYsIGFkZGl0aW9uYWxGYWNldFZhbHVlRmllbGRzW2ZpZWxkTmFtZV0pXG4gICAgICAgICksXG4gICAgICAgIC4uLnJlc3RcbiAgICAgIH0pO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLmFjYyxcbiAgICAgIFtmaWVsZE5hbWVdOiBhZGFwdGVkRmFjZXRcbiAgICB9O1xuICB9LCB7fSk7XG59XG5cbmZ1bmN0aW9uIGxpbWl0VG8xMDBwYWdlcyh0b3RhbFBhZ2VzKSB7XG4gIC8vIFdlIGxpbWl0IHRoaXMgdG8gMTAwIHBhZ2VzIHNpbmNlIEFwcCBTZWFyY2ggY3VycmVudGx5IGNhbm5vdCBwYWdlIHBhc3QgMTAwIHBhZ2VzXG4gIHJldHVybiBNYXRoLm1pbih0b3RhbFBhZ2VzLCAxMDApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gYWRhcHRSZXNwb25zZShyZXNwb25zZSwgb3B0aW9ucyA9IHt9KSB7XG4gIGNvbnN0IGZhY2V0cyA9IHJlc3BvbnNlLmluZm8uZmFjZXRzO1xuICBjb25zdCByZXF1ZXN0SWQgPSByZXNwb25zZS5pbmZvLm1ldGEucmVxdWVzdF9pZDtcblxuICBjb25zdCB0b3RhbFBhZ2VzID1cbiAgICByZXNwb25zZS5pbmZvLm1ldGEucGFnZSAmJlxuICAgIHR5cGVvZiByZXNwb25zZS5pbmZvLm1ldGEucGFnZS50b3RhbF9wYWdlcyAhPT0gXCJ1bmRlZmluZWRcIlxuICAgICAgPyBsaW1pdFRvMTAwcGFnZXMocmVzcG9uc2UuaW5mby5tZXRhLnBhZ2UudG90YWxfcGFnZXMpXG4gICAgICA6IHVuZGVmaW5lZDtcblxuICBjb25zdCB0b3RhbFJlc3VsdHMgPSByZXNwb25zZS5pbmZvLm1ldGEucGFnZVxuICAgID8gcmVzcG9uc2UuaW5mby5tZXRhLnBhZ2UudG90YWxfcmVzdWx0c1xuICAgIDogdW5kZWZpbmVkO1xuXG4gIHJldHVybiB7XG4gICAgLi4uKGZhY2V0cyAmJiB7IGZhY2V0czogYWRhcHRGYWNldHMoZmFjZXRzLCBvcHRpb25zKSB9KSxcbiAgICByYXdSZXNwb25zZTogcmVzcG9uc2UsXG4gICAgcmVxdWVzdElkLFxuICAgIHJlc3VsdHM6IHJlc3BvbnNlLnJhd1Jlc3VsdHMsXG4gICAgLi4uKHRvdGFsUGFnZXMgIT09IHVuZGVmaW5lZCAmJiB7IHRvdGFsUGFnZXMgfSksXG4gICAgLi4uKHRvdGFsUmVzdWx0cyAhPT0gdW5kZWZpbmVkICYmIHsgdG90YWxSZXN1bHRzIH0pXG4gIH07XG59XG4iXX0=