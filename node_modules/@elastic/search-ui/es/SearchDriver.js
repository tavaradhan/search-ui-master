import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
var _excluded = ["filters", "conditionalFacets"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import URLManager from "./URLManager";
import RequestSequencer from "./RequestSequencer";
import DebounceManager from "./DebounceManager";
import * as actions from "./actions";
import Events from "./Events";
import { mergeFilters } from "./helpers";
import * as a11y from "./A11yNotifications";

function filterSearchParameters(_ref) {
  var current = _ref.current,
      filters = _ref.filters,
      resultsPerPage = _ref.resultsPerPage,
      searchTerm = _ref.searchTerm,
      sortDirection = _ref.sortDirection,
      sortField = _ref.sortField,
      sortList = _ref.sortList;
  return {
    current: current,
    filters: filters,
    resultsPerPage: resultsPerPage,
    searchTerm: searchTerm,
    sortDirection: sortDirection,
    sortField: sortField,
    sortList: sortList
  };
}

export var DEFAULT_STATE = {
  // Search Parameters -- This is state that represents the input state.
  current: 1,
  filters: [],
  resultsPerPage: 20,
  searchTerm: "",
  sortDirection: "",
  sortField: "",
  sortList: [],
  // Result State -- This state represents state that is updated automatically
  // as the result of changing input state.
  autocompletedResults: [],
  autocompletedResultsRequestId: "",
  autocompletedSuggestions: {},
  autocompletedSuggestionsRequestId: "",
  error: "",
  isLoading: false,
  facets: {},
  requestId: "",
  results: [],
  resultSearchTerm: "",
  totalPages: 0,
  totalResults: 0,
  pagingStart: 0,
  pagingEnd: 0,
  wasSearched: false,
  rawResponse: {}
};

function removeConditionalFacets() {
  var facets = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var conditionalFacets = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var filters = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  return Object.entries(facets).reduce(function (acc, _ref2) {
    var _ref3 = _slicedToArray(_ref2, 2),
        facetKey = _ref3[0],
        facet = _ref3[1];

    if (conditionalFacets[facetKey] && typeof conditionalFacets[facetKey] === "function" && !conditionalFacets[facetKey]({
      filters: filters
    })) {
      return acc;
    }

    acc[facetKey] = facet;
    return acc;
  }, {});
}
/*
 * The Driver is a framework agnostic search state manager that is capable
 * syncing state to the url.
 */


var SearchDriver = /*#__PURE__*/function () {
  function SearchDriver(_ref4) {
    var _this = this;

    var apiConnector = _ref4.apiConnector,
        _ref4$autocompleteQue = _ref4.autocompleteQuery,
        autocompleteQuery = _ref4$autocompleteQue === void 0 ? {} : _ref4$autocompleteQue,
        debug = _ref4.debug,
        initialState = _ref4.initialState,
        onSearch = _ref4.onSearch,
        onAutocomplete = _ref4.onAutocomplete,
        onResultClick = _ref4.onResultClick,
        onAutocompleteResultClick = _ref4.onAutocompleteResultClick,
        _ref4$searchQuery = _ref4.searchQuery,
        searchQuery = _ref4$searchQuery === void 0 ? {} : _ref4$searchQuery,
        _ref4$trackUrlState = _ref4.trackUrlState,
        trackUrlState = _ref4$trackUrlState === void 0 ? true : _ref4$trackUrlState,
        _ref4$urlPushDebounce = _ref4.urlPushDebounceLength,
        urlPushDebounceLength = _ref4$urlPushDebounce === void 0 ? 500 : _ref4$urlPushDebounce,
        _ref4$hasA11yNotifica = _ref4.hasA11yNotifications,
        hasA11yNotifications = _ref4$hasA11yNotifica === void 0 ? false : _ref4$hasA11yNotifica,
        _ref4$a11yNotificatio = _ref4.a11yNotificationMessages,
        a11yNotificationMessages = _ref4$a11yNotificatio === void 0 ? {} : _ref4$a11yNotificatio,
        _ref4$alwaysSearchOnI = _ref4.alwaysSearchOnInitialLoad,
        alwaysSearchOnInitialLoad = _ref4$alwaysSearchOnI === void 0 ? false : _ref4$alwaysSearchOnI;

    _classCallCheck(this, SearchDriver);

    _defineProperty(this, "state", DEFAULT_STATE);

    _defineProperty(this, "_updateAutocomplete", function (searchTerm) {
      var _ref5 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          autocompleteResults = _ref5.autocompleteResults,
          autocompleteSuggestions = _ref5.autocompleteSuggestions;

      var requestId = _this.autocompleteRequestSequencer.next();

      var queryConfig = _objectSpread(_objectSpread({}, autocompleteResults && {
        results: _this.autocompleteQuery.results || {}
      }), autocompleteSuggestions && {
        suggestions: _this.autocompleteQuery.suggestions || {}
      });

      return _this.events.autocomplete({
        searchTerm: searchTerm
      }, queryConfig).then(function (autocompleted) {
        if (_this.autocompleteRequestSequencer.isOldRequest(requestId)) return;

        _this.autocompleteRequestSequencer.completed(requestId);

        _this._setState(autocompleted);
      });
    });

    _defineProperty(this, "_updateSearchResults", function (searchParameters) {
      var _ref6 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          _ref6$skipPushToUrl = _ref6.skipPushToUrl,
          skipPushToUrl = _ref6$skipPushToUrl === void 0 ? false : _ref6$skipPushToUrl,
          _ref6$replaceUrl = _ref6.replaceUrl,
          replaceUrl = _ref6$replaceUrl === void 0 ? false : _ref6$replaceUrl;

      var _this$state$searchPar = _objectSpread(_objectSpread({}, _this.state), searchParameters),
          current = _this$state$searchPar.current,
          filters = _this$state$searchPar.filters,
          resultsPerPage = _this$state$searchPar.resultsPerPage,
          searchTerm = _this$state$searchPar.searchTerm,
          sortDirection = _this$state$searchPar.sortDirection,
          sortField = _this$state$searchPar.sortField,
          sortList = _this$state$searchPar.sortList; // State updates should always be applied in the order that they are made. This function, _updateSearchResults,
      // makes state updates.
      // In the case where a call to "_updateSearchResults" was made and delayed for X amount of time using
      // `debounceManager.runWithDebounce`, and a subsequent call is made _updateSearchResults before that delay ends, we
      // want to make sure that outstanding call to "_updateSearchResults" is cancelled, as it would apply state updates
      // out of order.


      _this.debounceManager.cancelByName("_updateSearchResults");

      _this._setState({
        current: current,
        error: "",
        filters: filters,
        resultsPerPage: resultsPerPage,
        searchTerm: searchTerm,
        sortDirection: sortDirection,
        sortField: sortField,
        sortList: sortList
      });

      _this._makeSearchRequest({
        skipPushToUrl: skipPushToUrl,
        replaceUrl: replaceUrl
      });
    });

    _defineProperty(this, "_makeSearchRequest", DebounceManager.debounce(0, function (_ref7) {
      var skipPushToUrl = _ref7.skipPushToUrl,
          replaceUrl = _ref7.replaceUrl;
      var _this$state = _this.state,
          current = _this$state.current,
          filters = _this$state.filters,
          resultsPerPage = _this$state.resultsPerPage,
          searchTerm = _this$state.searchTerm,
          sortDirection = _this$state.sortDirection,
          sortField = _this$state.sortField,
          sortList = _this$state.sortList;

      _this._setState({
        isLoading: true
      });

      var requestId = _this.searchRequestSequencer.next();

      var _this$searchQuery = _this.searchQuery,
          searchQueryFilters = _this$searchQuery.filters,
          conditionalFacets = _this$searchQuery.conditionalFacets,
          restOfSearchQuery = _objectWithoutProperties(_this$searchQuery, _excluded);

      var queryConfig = _objectSpread(_objectSpread({}, restOfSearchQuery), {}, {
        facets: removeConditionalFacets(_this.searchQuery.facets, conditionalFacets, filters)
      });

      var requestState = _objectSpread(_objectSpread({}, filterSearchParameters(_this.state)), {}, {
        filters: mergeFilters(filters, _this.searchQuery.filters)
      });

      return _this.events.search(requestState, queryConfig).then(function (resultState) {
        if (_this.searchRequestSequencer.isOldRequest(requestId)) return;

        _this.searchRequestSequencer.completed(requestId); // Results paging start & end


        var totalResults = resultState.totalResults;
        var start = totalResults === 0 ? 0 : (current - 1) * resultsPerPage + 1;
        var end = totalResults <= start + resultsPerPage ? totalResults : start + resultsPerPage - 1;

        _this._setState(_objectSpread(_objectSpread({
          isLoading: false,
          resultSearchTerm: searchTerm,
          pagingStart: start,
          pagingEnd: end
        }, resultState), {}, {
          wasSearched: true
        }));

        if (_this.hasA11yNotifications) {
          var messageArgs = {
            start: start,
            end: end,
            totalResults: totalResults,
            searchTerm: searchTerm
          };

          _this.actions.a11yNotify("searchResults", messageArgs);
        }

        if (!skipPushToUrl && _this.trackUrlState) {
          // We debounce here so that we don't get a lot of intermediary
          // URL state if someone is updating a UI really fast, like typing
          // in a live search box for instance.
          _this.debounceManager.runWithDebounce(_this.urlPushDebounceLength, "pushStateToURL", _this.URLManager.pushStateToURL.bind(_this.URLManager), {
            current: current,
            filters: filters,
            resultsPerPage: resultsPerPage,
            searchTerm: searchTerm,
            sortDirection: sortDirection,
            sortField: sortField,
            sortList: sortList
          }, {
            replaceUrl: replaceUrl
          });
        }
      }, function (error) {
        _this._setState({
          error: "An unexpected error occurred: ".concat(error.message)
        });
      });
    }));

    this.actions = Object.entries(actions).reduce(function (acc, _ref8) {
      var _ref9 = _slicedToArray(_ref8, 2),
          actionName = _ref9[0],
          action = _ref9[1];

      return _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, actionName, action.bind(_this)));
    }, {});
    Object.assign(this, this.actions);
    this.events = new Events({
      apiConnector: apiConnector,
      onSearch: onSearch,
      onAutocomplete: onAutocomplete,
      onResultClick: onResultClick,
      onAutocompleteResultClick: onAutocompleteResultClick
    });
    this.debug = debug;

    if (this.debug) {
      console.warn("Search UI Debugging is enabled. This should be turned off in production deployments.");
      window.searchUI = this;
    }

    this.autocompleteRequestSequencer = new RequestSequencer();
    this.searchRequestSequencer = new RequestSequencer();
    this.debounceManager = new DebounceManager();
    this.autocompleteQuery = autocompleteQuery;
    this.searchQuery = searchQuery;
    this.subscriptions = [];
    this.trackUrlState = trackUrlState;
    this.urlPushDebounceLength = urlPushDebounceLength;
    this.alwaysSearchOnInitialLoad = alwaysSearchOnInitialLoad;
    var urlState;

    if (trackUrlState) {
      this.URLManager = new URLManager();
      urlState = this.URLManager.getStateFromURL();
      this.URLManager.onURLStateChange(function (urlState) {
        _this._updateSearchResults(_objectSpread(_objectSpread({}, DEFAULT_STATE), urlState), {
          skipPushToUrl: true
        });
      });
    } else {
      urlState = {};
    } // Manage screen reader accessible notifications


    this.hasA11yNotifications = hasA11yNotifications;
    if (this.hasA11yNotifications) a11y.getLiveRegion();
    this.a11yNotificationMessages = _objectSpread(_objectSpread({}, a11y.defaultMessages), a11yNotificationMessages); // Remember the state this application is initialized into, so that we can
    // reset to it later.

    this.startingState = _objectSpread(_objectSpread({}, this.state), initialState); // We filter these here to disallow anything other than valid search
    // parameters to be passed in initial state, or url state. `results`, etc,
    // should not be allowed to be passed in, that should be generated based on
    // the results of the query

    var _searchParameters = filterSearchParameters(_objectSpread(_objectSpread({}, this.startingState), urlState)); // Initialize the state without calling _setState, because we don't
    // want to trigger an update callback, we're just initializing the state
    // to the correct default values for the initial UI render


    this.state = _objectSpread(_objectSpread({}, this.state), _searchParameters); // We'll trigger an initial search if initial parameters contain
    // a search term or filters, or if alwaysSearchOnInitialLoad is set.
    // Otherwise, we'll just save their selections in state as initial values.

    if (_searchParameters.searchTerm || _searchParameters.filters.length > 0 || this.alwaysSearchOnInitialLoad) {
      this._updateSearchResults(_searchParameters, {
        replaceUrl: true
      });
    }
  }
  /**
   * This method is used to update state and trigger a new autocomplete search.
   *
   * @param {string} searchTerm
   * @param {Object=} Object
   * @param {boolean|Object} options.autocompleteResults - Should autocomplete results
   * @param {boolean|Object} options.autocompleteSuggestions - Should autocomplete suggestions
   */


  _createClass(SearchDriver, [{
    key: "_setState",
    value: function _setState(newState) {
      var state = _objectSpread(_objectSpread({}, this.state), newState); // eslint-disable-next-line no-console


      if (this.debug) console.log("Search UI: State Update", newState, state);
      this.state = state;
      this.subscriptions.forEach(function (subscription) {
        return subscription(state);
      });
    }
    /**
     * Dynamically update the searchQuery configuration in this driver.
     * This will issue a new query after being updated.
     *
     * @param Object searchQuery
     */

  }, {
    key: "setSearchQuery",
    value: function setSearchQuery(searchQuery) {
      this.searchQuery = searchQuery;

      this._updateSearchResults();
    }
    /**
     * @param Object autocompleteQuery
     */

  }, {
    key: "setAutocompleteQuery",
    value: function setAutocompleteQuery(autocompleteQuery) {
      this.autocompleteQuery = autocompleteQuery;
    }
    /**
     * Any time state is updated in this Driver, the provided callback
     * will be executed with the updated state.
     *
     * @param onStateChange Function
     */

  }, {
    key: "subscribeToStateChanges",
    value: function subscribeToStateChanges(onStateChange) {
      this.subscriptions.push(onStateChange);
    }
    /**
     * @param onStateChange Function
     */

  }, {
    key: "unsubscribeToStateChanges",
    value: function unsubscribeToStateChanges(onStateChange) {
      this.subscriptions = this.subscriptions.filter(function (sub) {
        return sub !== onStateChange;
      });
    }
    /**
     * Remove all listeners
     */

  }, {
    key: "tearDown",
    value: function tearDown() {
      this.subscriptions = [];
      this.URLManager && this.URLManager.tearDown();
    }
    /**
     * Retrieves all available acitons
     *
     * @returns Object All actions
     */

  }, {
    key: "getActions",
    value: function getActions() {
      return this.actions;
    }
    /**
     * Retrieve current state. Typically used on app initialization. Subsequent
     * state updates should come through subscription.
     *
     * @returns Object Current state
     */

  }, {
    key: "getState",
    value: function getState() {
      // We return a copy of state here, because we want to ensure the state
      // inside of this object remains immutable.
      return _objectSpread({}, this.state);
    }
  }]);

  return SearchDriver;
}();

export { SearchDriver as default };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,