import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
var _excluded = ["mockSearchResponse", "mockApiConnector"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

import SearchDriver from "../SearchDriver";
var suggestions = {
  documents: [{
    suggestion: "carlsbad"
  }, {
    suggestion: "carlsbad caverns"
  }, {
    suggestion: "carolina"
  }]
};
var searchResponse = {
  totalResults: 1000,
  totalPages: 100,
  requestId: "12345",
  facets: {},
  results: [{}, {}]
};
var autocompleteSearchResponse = {
  requestId: "6789",
  results: [{}, {}]
};
export function getMockApiConnector() {
  return {
    onAutocomplete: jest.fn().mockReturnValue({
      then: function then(cb) {
        return cb({
          autocompletedResults: autocompleteSearchResponse.results,
          autocompletedResultsRequestId: autocompleteSearchResponse.requestId,
          autocompletedSuggestions: suggestions
        });
      }
    }),
    onSearch: jest.fn().mockReturnValue({
      then: function then(cb) {
        return cb(searchResponse);
      }
    }),
    onResultClick: jest.fn().mockReturnValue({
      then: function then() {}
    }),
    onAutocompleteResultClick: jest.fn().mockReturnValue({
      then: function then() {}
    })
  };
}
export function setupDriver() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      mockSearchResponse = _ref.mockSearchResponse,
      mockApiConnector = _ref.mockApiConnector,
      rest = _objectWithoutProperties(_ref, _excluded);

  mockApiConnector = mockApiConnector || getMockApiConnector();

  if (mockSearchResponse) {
    mockApiConnector.onSearch = jest.fn().mockReturnValue({
      then: function then(cb) {
        return cb(mockSearchResponse);
      }
    });
  }

  var driver = new SearchDriver(_objectSpread(_objectSpread({
    apiConnector: mockApiConnector
  }, rest), {}, {
    // We don't want to deal with async in our tests, so pass 0 so URL state
    // pushes happen synchronously
    urlPushDebounceLength: 0
  }));
  var updatedStateAfterAction = {};
  driver.subscribeToStateChanges(function (newState) {
    updatedStateAfterAction.state = newState;
  });
  jest.runAllTimers();
  return {
    stateAfterCreation: driver.getState(),
    driver: driver,
    updatedStateAfterAction: updatedStateAfterAction,
    mockApiConnector: mockApiConnector
  };
}
export function doesStateHaveResponseData(response) {
  var requestId = response.requestId,
      results = response.results,
      totalPages = response.totalPages,
      totalResults = response.totalResults,
      wasSearched = response.wasSearched;
  return !!results && results.length && !!requestId && totalPages > 0 && totalResults > 0 && !!wasSearched;
}
export function getSearchCalls(mockApiConnector) {
  return mockApiConnector.onSearch.mock.calls;
}
export function getAutocompleteCalls(mockApiConnector) {
  return mockApiConnector.onAutocomplete.mock.calls;
}
export function getClickCalls(mockApiConnector) {
  return mockApiConnector.onResultClick.mock.calls;
}
export function getAutocompleteClickCalls(mockApiConnector) {
  return mockApiConnector.onAutocompleteResultClick.mock.calls;
}
/**
 * Returns a promise that resolves after the current event loop.
 *
 * Useful for writing `await waitATick()` to wait for a promise to resolve.
 */

export function waitATick() {
  var promiseResolve;
  var promise = new Promise(function (resolve) {
    return promiseResolve = resolve;
  });
  setTimeout(function () {
    return promiseResolve();
  });
  jest.runAllTimers();
  return promise;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,