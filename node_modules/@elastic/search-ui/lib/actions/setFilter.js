"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = setFilter;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

/**
 * Filter results - Replaces current filter value
 *
 * Will trigger new search
 *
 * @param name String field name to filter on
 * @param value FilterValue to apply
 * @param type String (Optional) type of filter to apply
 */
function setFilter(name, value) {
  var _console;

  var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "all";
  // eslint-disable-next-line no-console
  if (this.debug) (_console = console).log.apply(_console, ["Search UI: Action", "setFilter"].concat(Array.prototype.slice.call(arguments)));
  var filters = this.state.filters;
  filters = filters.filter(function (filter) {
    return filter.field !== name || filter.type !== type;
  });

  this._updateSearchResults({
    current: 1,
    filters: [].concat((0, _toConsumableArray2.default)(filters), [{
      field: name,
      values: [value],
      type: type
    }])
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hY3Rpb25zL3NldEZpbHRlci5qcyJdLCJuYW1lcyI6WyJzZXRGaWx0ZXIiLCJuYW1lIiwidmFsdWUiLCJ0eXBlIiwiZGVidWciLCJjb25zb2xlIiwibG9nIiwiYXJndW1lbnRzIiwiZmlsdGVycyIsInN0YXRlIiwiZmlsdGVyIiwiZmllbGQiLCJfdXBkYXRlU2VhcmNoUmVzdWx0cyIsImN1cnJlbnQiLCJ2YWx1ZXMiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ2UsU0FBU0EsU0FBVCxDQUFtQkMsSUFBbkIsRUFBeUJDLEtBQXpCLEVBQThDO0FBQUE7O0FBQUEsTUFBZEMsSUFBYyx1RUFBUCxLQUFPO0FBQzNEO0FBQ0EsTUFBSSxLQUFLQyxLQUFULEVBQWdCLFlBQUFDLE9BQU8sRUFBQ0MsR0FBUixrQkFBWSxtQkFBWixFQUFpQyxXQUFqQyxvQ0FBaURDLFNBQWpEO0FBRWhCLE1BQU1DLE9BQU4sR0FBa0IsS0FBS0MsS0FBdkIsQ0FBTUQsT0FBTjtBQUNBQSxFQUFBQSxPQUFPLEdBQUdBLE9BQU8sQ0FBQ0UsTUFBUixDQUNSLFVBQUFBLE1BQU07QUFBQSxXQUFJQSxNQUFNLENBQUNDLEtBQVAsS0FBaUJWLElBQWpCLElBQXlCUyxNQUFNLENBQUNQLElBQVAsS0FBZ0JBLElBQTdDO0FBQUEsR0FERSxDQUFWOztBQUlBLE9BQUtTLG9CQUFMLENBQTBCO0FBQ3hCQyxJQUFBQSxPQUFPLEVBQUUsQ0FEZTtBQUV4QkwsSUFBQUEsT0FBTyw2Q0FDRkEsT0FERSxJQUVMO0FBQ0VHLE1BQUFBLEtBQUssRUFBRVYsSUFEVDtBQUVFYSxNQUFBQSxNQUFNLEVBQUUsQ0FBQ1osS0FBRCxDQUZWO0FBR0VDLE1BQUFBLElBQUksRUFBSkE7QUFIRixLQUZLO0FBRmlCLEdBQTFCO0FBV0QiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEZpbHRlciByZXN1bHRzIC0gUmVwbGFjZXMgY3VycmVudCBmaWx0ZXIgdmFsdWVcbiAqXG4gKiBXaWxsIHRyaWdnZXIgbmV3IHNlYXJjaFxuICpcbiAqIEBwYXJhbSBuYW1lIFN0cmluZyBmaWVsZCBuYW1lIHRvIGZpbHRlciBvblxuICogQHBhcmFtIHZhbHVlIEZpbHRlclZhbHVlIHRvIGFwcGx5XG4gKiBAcGFyYW0gdHlwZSBTdHJpbmcgKE9wdGlvbmFsKSB0eXBlIG9mIGZpbHRlciB0byBhcHBseVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzZXRGaWx0ZXIobmFtZSwgdmFsdWUsIHR5cGUgPSBcImFsbFwiKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gIGlmICh0aGlzLmRlYnVnKSBjb25zb2xlLmxvZyhcIlNlYXJjaCBVSTogQWN0aW9uXCIsIFwic2V0RmlsdGVyXCIsIC4uLmFyZ3VtZW50cyk7XG5cbiAgbGV0IHsgZmlsdGVycyB9ID0gdGhpcy5zdGF0ZTtcbiAgZmlsdGVycyA9IGZpbHRlcnMuZmlsdGVyKFxuICAgIGZpbHRlciA9PiBmaWx0ZXIuZmllbGQgIT09IG5hbWUgfHwgZmlsdGVyLnR5cGUgIT09IHR5cGVcbiAgKTtcblxuICB0aGlzLl91cGRhdGVTZWFyY2hSZXN1bHRzKHtcbiAgICBjdXJyZW50OiAxLFxuICAgIGZpbHRlcnM6IFtcbiAgICAgIC4uLmZpbHRlcnMsXG4gICAgICB7XG4gICAgICAgIGZpZWxkOiBuYW1lLFxuICAgICAgICB2YWx1ZXM6IFt2YWx1ZV0sXG4gICAgICAgIHR5cGVcbiAgICAgIH1cbiAgICBdXG4gIH0pO1xufVxuIl19