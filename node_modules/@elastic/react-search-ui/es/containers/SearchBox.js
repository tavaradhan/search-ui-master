import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
var _excluded = ["autocompleteMinimumCharacters", "autocompleteResults", "autocompleteSuggestions", "autocompletedResults", "autocompletedSuggestions", "className", "autocompleteView", "inputProps", "inputView", "onSelectAutocomplete", "onSubmit", "searchTerm", "view"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import PropTypes from "prop-types";
import { Component } from "react";
import { SearchBox } from "@elastic/react-search-ui-views";
import { withSearch } from "..";
import { Result, Suggestion } from "../types";
export var SearchBoxContainer = /*#__PURE__*/function (_Component) {
  _inherits(SearchBoxContainer, _Component);

  var _super = _createSuper(SearchBoxContainer);

  function SearchBoxContainer() {
    var _this;

    _classCallCheck(this, SearchBoxContainer);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _super.call.apply(_super, [this].concat(args));

    _defineProperty(_assertThisInitialized(_this), "state", {
      isFocused: false
    });

    _defineProperty(_assertThisInitialized(_this), "handleFocus", function () {
      _this.setState({
        isFocused: true
      });
    });

    _defineProperty(_assertThisInitialized(_this), "handleBlur", function () {
      _this.setState({
        isFocused: false
      });
    });

    _defineProperty(_assertThisInitialized(_this), "completeSuggestion", function (searchTerm) {
      var _this$props = _this.props,
          shouldClearFilters = _this$props.shouldClearFilters,
          setSearchTerm = _this$props.setSearchTerm;
      setSearchTerm(searchTerm, {
        shouldClearFilters: shouldClearFilters
      });
    });

    _defineProperty(_assertThisInitialized(_this), "handleSubmit", function (e) {
      var _this$props2 = _this.props,
          shouldClearFilters = _this$props2.shouldClearFilters,
          searchTerm = _this$props2.searchTerm,
          setSearchTerm = _this$props2.setSearchTerm;
      e.preventDefault();
      setSearchTerm(searchTerm, {
        shouldClearFilters: shouldClearFilters
      });
    });

    _defineProperty(_assertThisInitialized(_this), "handleChange", function (value) {
      var _this$props3 = _this.props,
          autocompleteMinimumCharacters = _this$props3.autocompleteMinimumCharacters,
          autocompleteResults = _this$props3.autocompleteResults,
          autocompleteSuggestions = _this$props3.autocompleteSuggestions,
          shouldClearFilters = _this$props3.shouldClearFilters,
          searchAsYouType = _this$props3.searchAsYouType,
          setSearchTerm = _this$props3.setSearchTerm,
          debounceLength = _this$props3.debounceLength;

      var options = _objectSpread(_objectSpread({
        autocompleteMinimumCharacters: autocompleteMinimumCharacters
      }, (autocompleteResults || autocompleteSuggestions || searchAsYouType) && {
        debounce: debounceLength || 200
      }), {}, {
        shouldClearFilters: shouldClearFilters,
        refresh: !!searchAsYouType,
        autocompleteResults: !!autocompleteResults,
        autocompleteSuggestions: !!autocompleteSuggestions
      });

      setSearchTerm(value, options);
    });

    _defineProperty(_assertThisInitialized(_this), "handleNotifyAutocompleteSelected", function (selection) {
      var _this$props4 = _this.props,
          autocompleteResults = _this$props4.autocompleteResults,
          trackAutocompleteClickThrough = _this$props4.trackAutocompleteClickThrough; // Because suggestions don't count as clickthroughs, only
      // results

      if (autocompleteResults && autocompleteResults.shouldTrackClickThrough !== false && !selection.suggestion) {
        var _autocompleteResults$ = autocompleteResults.clickThroughTags,
            clickThroughTags = _autocompleteResults$ === void 0 ? [] : _autocompleteResults$;
        var id = selection.id.raw;
        trackAutocompleteClickThrough(id, clickThroughTags);
      }
    });

    _defineProperty(_assertThisInitialized(_this), "defaultOnSelectAutocomplete", function (selection) {
      if (!selection) return;
      var autocompleteResults = _this.props.autocompleteResults;

      _this.handleNotifyAutocompleteSelected(selection);

      if (!selection.suggestion) {
        var url = selection[autocompleteResults.urlField] ? selection[autocompleteResults.urlField].raw : "";

        if (url) {
          var target = autocompleteResults.linkTarget || "_self";
          window.open(url, target);
        }
      } else {
        _this.completeSuggestion(selection.suggestion);
      }
    });

    return _this;
  }

  _createClass(SearchBoxContainer, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var isFocused = this.state.isFocused;

      var _this$props5 = this.props,
          autocompleteMinimumCharacters = _this$props5.autocompleteMinimumCharacters,
          autocompleteResults = _this$props5.autocompleteResults,
          autocompleteSuggestions = _this$props5.autocompleteSuggestions,
          autocompletedResults = _this$props5.autocompletedResults,
          autocompletedSuggestions = _this$props5.autocompletedSuggestions,
          className = _this$props5.className,
          autocompleteView = _this$props5.autocompleteView,
          inputProps = _this$props5.inputProps,
          inputView = _this$props5.inputView,
          onSelectAutocomplete = _this$props5.onSelectAutocomplete,
          onSubmit = _this$props5.onSubmit,
          searchTerm = _this$props5.searchTerm,
          view = _this$props5.view,
          rest = _objectWithoutProperties(_this$props5, _excluded);

      var View = view || SearchBox;
      var useAutocomplete = (!!autocompleteResults || !!autocompleteSuggestions) && searchTerm.length >= autocompleteMinimumCharacters;
      var autocompletedSuggestionsCount = Object.entries(autocompletedSuggestions // eslint-disable-next-line no-unused-vars
      ).reduce(function (acc, _ref) {
        var _ref2 = _slicedToArray(_ref, 2),
            _ = _ref2[0],
            value = _ref2[1];

        return acc + value.length;
      }, 0);
      var allAutocompletedItemsCount = autocompletedSuggestionsCount + autocompletedResults.length;
      var handleOnSelectAutocomplete;

      if (onSelectAutocomplete) {
        handleOnSelectAutocomplete = function handleOnSelectAutocomplete(selection) {
          onSelectAutocomplete(selection, {
            notifyAutocompleteSelected: _this2.handleNotifyAutocompleteSelected,
            completeSuggestion: _this2.completeSuggestion,
            autocompleteResults: _this2.props.autocompleteResults
          }, _this2.defaultOnSelectAutocomplete);
        };
      }

      return View(_objectSpread({
        allAutocompletedItemsCount: allAutocompletedItemsCount,
        autocompleteView: autocompleteView,
        autocompleteResults: autocompleteResults,
        autocompleteSuggestions: autocompleteSuggestions,
        autocompletedResults: autocompletedResults,
        autocompletedSuggestions: autocompletedSuggestions,
        className: className,
        autocompletedSuggestionsCount: autocompletedSuggestionsCount,
        completeSuggestion: this.completeSuggestion,
        isFocused: isFocused,
        notifyAutocompleteSelected: this.handleNotifyAutocompleteSelected,
        onChange: function onChange(value) {
          return _this2.handleChange(value);
        },
        onSelectAutocomplete: handleOnSelectAutocomplete || this.defaultOnSelectAutocomplete,
        onSubmit: onSubmit ? function (e) {
          e.preventDefault();
          onSubmit(searchTerm);
        } : this.handleSubmit,
        useAutocomplete: useAutocomplete,
        value: searchTerm,
        inputProps: _objectSpread({
          onFocus: this.handleFocus,
          onBlur: this.handleBlur
        }, inputProps),
        inputView: inputView
      }, rest));
    }
  }]);

  return SearchBoxContainer;
}(Component);

_defineProperty(SearchBoxContainer, "propTypes", {
  // Props
  autocompleteMinimumCharacters: PropTypes.number,
  autocompleteResults: PropTypes.oneOfType([PropTypes.bool, PropTypes.shape({
    clickThroughTags: PropTypes.arrayOf(PropTypes.string),
    linkTarget: PropTypes.string,
    sectionTitle: PropTypes.string,
    shouldTrackClickThrough: PropTypes.bool,
    titleField: PropTypes.string.isRequired,
    urlField: PropTypes.string.isRequired
  })]),
  autocompleteSuggestions: PropTypes.oneOfType([PropTypes.bool, PropTypes.exact({
    sectionTitle: PropTypes.string
  }), PropTypes.objectOf(PropTypes.exact({
    sectionTitle: PropTypes.string
  }))]),
  autocompleteView: PropTypes.func,
  className: PropTypes.string,
  shouldClearFilters: PropTypes.bool,
  debounceLength: PropTypes.number,
  inputProps: PropTypes.object,
  inputView: PropTypes.func,
  onSelectAutocomplete: PropTypes.func,
  onSubmit: PropTypes.func,
  searchAsYouType: PropTypes.bool,
  view: PropTypes.func,
  // State
  autocompletedResults: PropTypes.arrayOf(Result).isRequired,
  autocompletedSuggestions: PropTypes.objectOf(PropTypes.arrayOf(Suggestion)).isRequired,
  searchTerm: PropTypes.string.isRequired,
  // Actions
  setSearchTerm: PropTypes.func.isRequired,
  trackAutocompleteClickThrough: PropTypes.func.isRequired
});

_defineProperty(SearchBoxContainer, "defaultProps", {
  autocompleteMinimumCharacters: 0,
  shouldClearFilters: true
});

export default withSearch(function (_ref3) {
  var autocompletedResults = _ref3.autocompletedResults,
      autocompletedSuggestions = _ref3.autocompletedSuggestions,
      searchTerm = _ref3.searchTerm,
      setSearchTerm = _ref3.setSearchTerm,
      trackAutocompleteClickThrough = _ref3.trackAutocompleteClickThrough;
  return {
    autocompletedResults: autocompletedResults,
    autocompletedSuggestions: autocompletedSuggestions,
    searchTerm: searchTerm,
    setSearchTerm: setSearchTerm,
    trackAutocompleteClickThrough: trackAutocompleteClickThrough
  };
})(SearchBoxContainer);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,