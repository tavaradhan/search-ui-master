import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/classCallCheck";
import _createClass from "@babel/runtime/helpers/createClass";
import _inherits from "@babel/runtime/helpers/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/getPrototypeOf";
import _defineProperty from "@babel/runtime/helpers/defineProperty";
import _slicedToArray from "@babel/runtime/helpers/slicedToArray";
var _excluded = ["className", "label", "setSort", "sortDirection", "sortField", "sortList", "sortOptions", "view"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

import PropTypes from "prop-types";
import { Component } from "react";
import { withSearch } from "..";
import { Sorting } from "@elastic/react-search-ui-views";
import SortList from "../types/SortList";
import { SortOption } from "../types";

function findSortOption(sortOptions, sortData) {
  if (sortData.indexOf("|||") === -1) {
    return sortOptions.find(function (option) {
      return JSON.stringify(option.value) === sortData;
    });
  }

  var _sortData$split = sortData.split("|||"),
      _sortData$split2 = _slicedToArray(_sortData$split, 2),
      value = _sortData$split2[0],
      direction = _sortData$split2[1];

  return sortOptions.find(function (option) {
    return option.value === value && option.direction === direction;
  });
}

function formatValue(sortField, sortDirection, sortList) {
  if (sortList && sortList.length > 0) {
    return JSON.stringify(sortList);
  }

  return "".concat(sortField, "|||").concat(sortDirection);
}

function formatSelectValues(sortOption) {
  if (Array.isArray(sortOption.value)) {
    // save value as string for comparison
    return JSON.stringify(sortOption.value);
  } else {
    return formatValue(sortOption.value, sortOption.direction);
  }
}

function formatSelectOption(sortOption) {
  return {
    label: sortOption.name,
    value: formatSelectValues(sortOption)
  };
}

export var SortingContainer = /*#__PURE__*/function (_Component) {
  _inherits(SortingContainer, _Component);

  var _super = _createSuper(SortingContainer);

  function SortingContainer() {
    _classCallCheck(this, SortingContainer);

    return _super.apply(this, arguments);
  }

  _createClass(SortingContainer, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          className = _this$props.className,
          label = _this$props.label,
          setSort = _this$props.setSort,
          sortDirection = _this$props.sortDirection,
          sortField = _this$props.sortField,
          sortList = _this$props.sortList,
          sortOptions = _this$props.sortOptions,
          view = _this$props.view,
          rest = _objectWithoutProperties(_this$props, _excluded);

      var View = view || Sorting;
      return View(_objectSpread({
        className: className,
        label: label,
        onChange: function onChange(o) {
          var sortOption = findSortOption(sortOptions, o);
          setSort(sortOption.value, sortOption.direction);
        },
        options: sortOptions.map(formatSelectOption),
        value: formatValue(sortField, sortDirection, sortList)
      }, rest));
    }
  }]);

  return SortingContainer;
}(Component);

_defineProperty(SortingContainer, "propTypes", {
  // Props
  className: PropTypes.string,
  label: PropTypes.string,
  sortOptions: PropTypes.arrayOf(SortOption).isRequired,
  view: PropTypes.func,
  // State
  sortDirection: PropTypes.oneOf(["asc", "desc", ""]),
  sortField: PropTypes.string,
  sortList: SortList,
  // Actions
  setSort: PropTypes.func.isRequired
});

export default withSearch(function (_ref) {
  var sortDirection = _ref.sortDirection,
      sortField = _ref.sortField,
      sortList = _ref.sortList,
      setSort = _ref.setSort;
  return {
    sortDirection: sortDirection,
    sortField: sortField,
    sortList: sortList,
    setSort: setSort
  };
})(SortingContainer);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9jb250YWluZXJzL1NvcnRpbmcuanMiXSwibmFtZXMiOlsiUHJvcFR5cGVzIiwiQ29tcG9uZW50Iiwid2l0aFNlYXJjaCIsIlNvcnRpbmciLCJTb3J0TGlzdCIsIlNvcnRPcHRpb24iLCJmaW5kU29ydE9wdGlvbiIsInNvcnRPcHRpb25zIiwic29ydERhdGEiLCJpbmRleE9mIiwiZmluZCIsIm9wdGlvbiIsIkpTT04iLCJzdHJpbmdpZnkiLCJ2YWx1ZSIsInNwbGl0IiwiZGlyZWN0aW9uIiwiZm9ybWF0VmFsdWUiLCJzb3J0RmllbGQiLCJzb3J0RGlyZWN0aW9uIiwic29ydExpc3QiLCJsZW5ndGgiLCJmb3JtYXRTZWxlY3RWYWx1ZXMiLCJzb3J0T3B0aW9uIiwiQXJyYXkiLCJpc0FycmF5IiwiZm9ybWF0U2VsZWN0T3B0aW9uIiwibGFiZWwiLCJuYW1lIiwiU29ydGluZ0NvbnRhaW5lciIsInByb3BzIiwiY2xhc3NOYW1lIiwic2V0U29ydCIsInZpZXciLCJyZXN0IiwiVmlldyIsIm9uQ2hhbmdlIiwibyIsIm9wdGlvbnMiLCJtYXAiLCJzdHJpbmciLCJhcnJheU9mIiwiaXNSZXF1aXJlZCIsImZ1bmMiLCJvbmVPZiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsT0FBT0EsU0FBUCxNQUFzQixZQUF0QjtBQUNBLFNBQVNDLFNBQVQsUUFBMEIsT0FBMUI7QUFDQSxTQUFTQyxVQUFULFFBQTJCLElBQTNCO0FBQ0EsU0FBU0MsT0FBVCxRQUF3QixnQ0FBeEI7QUFDQSxPQUFPQyxRQUFQLE1BQXFCLG1CQUFyQjtBQUVBLFNBQVNDLFVBQVQsUUFBMkIsVUFBM0I7O0FBRUEsU0FBU0MsY0FBVCxDQUF3QkMsV0FBeEIsRUFBcUNDLFFBQXJDLEVBQStDO0FBQzdDLE1BQUlBLFFBQVEsQ0FBQ0MsT0FBVCxDQUFpQixLQUFqQixNQUE0QixDQUFDLENBQWpDLEVBQW9DO0FBQ2xDLFdBQU9GLFdBQVcsQ0FBQ0csSUFBWixDQUNMLFVB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LEVBQUUzQixTQUFTLENBQUN3QyxNQUhBO0FBSWpCakMsRUFBQUEsV0FBVyxFQUFFUCxTQUFTLENBQUN5QyxPQUFWLENBQWtCcEMsVUFBbEIsRUFBOEJxQyxVQUoxQjtBQUtqQlQsRUFBQUEsSUFBSSxFQUFFakMsU0FBUyxDQUFDMkMsSUFMQztBQU1qQjtBQUNBeEIsRUFBQUEsYUFBYSxFQUFFbkIsU0FBUyxDQUFDNEMsS0FBVixDQUFnQixDQUFDLEtBQUQsRUFBUSxNQUFSLEVBQWdCLEVBQWhCLENBQWhCLENBUEU7QUFRakIxQixFQUFBQSxTQUFTLEVBQUVsQixTQUFTLENBQUN3QyxNQVJKO0FBU2pCcEIsRUFBQUEsUUFBUSxFQUFFaEIsUUFUTztBQVVqQjtBQUNBNEIsRUFBQUEsT0FBTyxFQUFFaEMsU0FBUyxDQUFDMkMsSUFBVixDQUFlRDtBQVhQLEM7O0FBMkNyQixlQUFleEMsVUFBVSxDQUN2QjtBQUFBLE1BQUdpQixhQUFILFFBQUdBLGFBQUg7QUFBQSxNQUFrQkQsU0FBbEIsUUFBa0JBLFNBQWxCO0FBQUEsTUFBNkJFLFFBQTdCLFFBQTZCQSxRQUE3QjtBQUFBLE1BQXVDWSxPQUF2QyxRQUF1Q0EsT0FBdkM7QUFBQSxTQUFzRDtBQUNwRGIsSUFBQUEsYUFBYSxFQUFiQSxhQURvRDtBQUVwREQsSUFBQUEsU0FBUyxFQUFUQSxTQUZvRDtBQUdwREUsSUFBQUEsUUFBUSxFQUFSQSxRQUhvRDtBQUlwRFksSUFBQUEsT0FBTyxFQUFQQTtBQUpvRCxHQUF0RDtBQUFBLENBRHVCLENBQVYsQ0FPYkgsZ0JBUGEsQ0FBZiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgd2l0aFNlYXJjaCB9IGZyb20gXCIuLlwiO1xuaW1wb3J0IHsgU29ydGluZyB9IGZyb20gXCJAZWxhc3RpYy9yZWFjdC1zZWFyY2gtdWktdmlld3NcIjtcbmltcG9ydCBTb3J0TGlzdCBmcm9tIFwiLi4vdHlwZXMvU29ydExpc3RcIjtcblxuaW1wb3J0IHsgU29ydE9wdGlvbiB9IGZyb20gXCIuLi90eXBlc1wiO1xuXG5mdW5jdGlvbiBmaW5kU29ydE9wdGlvbihzb3J0T3B0aW9ucywgc29ydERhdGEpIHtcbiAgaWYgKHNvcnREYXRhLmluZGV4T2YoXCJ8fHxcIikgPT09IC0xKSB7XG4gICAgcmV0dXJuIHNvcnRPcHRpb25zLmZpbmQoXG4gICAgICBvcHRpb24gPT4gSlNPTi5zdHJpbmdpZnkob3B0aW9uLnZhbHVlKSA9PT0gc29ydERhdGFcbiAgICApO1xuICB9XG5cbiAgY29uc3QgW3ZhbHVlLCBkaXJlY3Rpb25dID0gc29ydERhdGEuc3BsaXQoXCJ8fHxcIik7XG5cbiAgcmV0dXJuIHNvcnRPcHRpb25zLmZpbmQoXG4gICAgb3B0aW9uID0+IG9wdGlvbi52YWx1ZSA9PT0gdmFsdWUgJiYgb3B0aW9uLmRpcmVjdGlvbiA9PT0gZGlyZWN0aW9uXG4gICk7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFZhbHVlKHNvcnRGaWVsZCwgc29ydERpcmVjdGlvbiwgc29ydExpc3QpIHtcbiAgaWYgKHNvcnRMaXN0ICYmIHNvcnRMaXN0Lmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoc29ydExpc3QpO1xuICB9XG4gIHJldHVybiBgJHtzb3J0RmllbGR9fHx8JHtzb3J0RGlyZWN0aW9ufWA7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFNlbGVjdFZhbHVlcyhzb3J0T3B0aW9uKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KHNvcnRPcHRpb24udmFsdWUpKSB7XG4gICAgLy8gc2F2ZSB2YWx1ZSBhcyBzdHJpbmcgZm9yIGNvbXBhcmlzb25cbiAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoc29ydE9wdGlvbi52YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZvcm1hdFZhbHVlKHNvcnRPcHRpb24udmFsdWUsIHNvcnRPcHRpb24uZGlyZWN0aW9uKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBmb3JtYXRTZWxlY3RPcHRpb24oc29ydE9wdGlvbikge1xuICByZXR1cm4ge1xuICAgIGxhYmVsOiBzb3J0T3B0aW9uLm5hbWUsXG4gICAgdmFsdWU6IGZvcm1hdFNlbGVjdFZhbHVlcyhzb3J0T3B0aW9uKVxuICB9O1xufVxuZXhwb3J0IGNsYXNzIFNvcnRpbmdDb250YWluZXIgZXh0ZW5kcyBDb21wb25lbnQge1xuICBzdGF0aWMgcHJvcFR5cGVzID0ge1xuICAgIC8vIFByb3BzXG4gICAgY2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGxhYmVsOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHNvcnRPcHRpb25zOiBQcm9wVHlwZXMuYXJyYXlPZihTb3J0T3B0aW9uKS5pc1JlcXVpcmVkLFxuICAgIHZpZXc6IFByb3BUeXBlcy5mdW5jLFxuICAgIC8vIFN0YXRlXG4gICAgc29ydERpcmVjdGlvbjogUHJvcFR5cGVzLm9uZU9mKFtcImFzY1wiLCBcImRlc2NcIiwgXCJcIl0pLFxuICAgIHNvcnRGaWVsZDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBzb3J0TGlzdDogU29ydExpc3QsXG4gICAgLy8gQWN0aW9uc1xuICAgIHNldFNvcnQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge1xuICAgICAgY2xhc3NOYW1lLFxuICAgICAgbGFiZWwsXG4gICAgICBzZXRTb3J0LFxuICAgICAgc29ydERpcmVjdGlvbixcbiAgICAgIHNvcnRGaWVsZCxcbiAgICAgIHNvcnRMaXN0LFxuICAgICAgc29ydE9wdGlvbnMsXG4gICAgICB2aWV3LFxuICAgICAgLi4ucmVzdFxuICAgIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgY29uc3QgVmlldyA9IHZpZXcgfHwgU29ydGluZztcblxuICAgIHJldHVybiBWaWV3KHtcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGxhYmVsLFxuICAgICAgb25DaGFuZ2U6IG8gPT4ge1xuICAgICAgICBjb25zdCBzb3J0T3B0aW9uID0gZmluZFNvcnRPcHRpb24oc29ydE9wdGlvbnMsIG8pO1xuICAgICAgICBzZXRTb3J0KHNvcnRPcHRpb24udmFsdWUsIHNvcnRPcHRpb24uZGlyZWN0aW9uKTtcbiAgICAgIH0sXG4gICAgICBvcHRpb25zOiBzb3J0T3B0aW9ucy5tYXAoZm9ybWF0U2VsZWN0T3B0aW9uKSxcbiAgICAgIHZhbHVlOiBmb3JtYXRWYWx1ZShzb3J0RmllbGQsIHNvcnREaXJlY3Rpb24sIHNvcnRMaXN0KSxcbiAgICAgIC4uLnJlc3RcbiAgICB9KTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCB3aXRoU2VhcmNoKFxuICAoeyBzb3J0RGlyZWN0aW9uLCBzb3J0RmllbGQsIHNvcnRMaXN0LCBzZXRTb3J0IH0pID0+ICh7XG4gICAgc29ydERpcmVjdGlvbixcbiAgICBzb3J0RmllbGQsXG4gICAgc29ydExpc3QsXG4gICAgc2V0U29ydFxuICB9KVxuKShTb3J0aW5nQ29udGFpbmVyKTtcbiJdfQ==