"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _viewHelpers = require("./view-helpers");

var _FieldValueWrapper = require("./types/FieldValueWrapper");

var _excluded = ["className", "result", "onClickLink", "titleField", "urlField", "thumbnailField"];

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function getFieldType(result, field, type) {
  if (result[field]) return result[field][type];
}

function getRaw(result, field) {
  return getFieldType(result, field, "raw");
}

function getSnippet(result, field) {
  return getFieldType(result, field, "snippet");
}

function htmlEscape(str) {
  if (!str) return "";
  return String(str).replace(/&/g, "&amp;").replace(/"/g, "&quot;").replace(/'/g, "&#39;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
}

function getEscapedField(result, field) {
  // Fallback to raw values here, because non-string fields
  // will not have a snippet fallback. Raw values MUST be html escaped.
  var safeField = getSnippet(result, field) || htmlEscape(getRaw(result, field));
  return Array.isArray(safeField) ? safeField.join(", ") : safeField;
}

function getEscapedFields(result) {
  return Object.keys(result).reduce(function (acc, field) {
    // If we receive an arbitrary value from the response, we may not properly
    // handle it, so we should filter out arbitrary values here.
    //
    // I.e.,
    // Arbitrary value: "_metaField: '1939191'"
    // vs.
    // FieldValueWrapper: "_metaField: {raw: '1939191'}"
    if (!(0, _FieldValueWrapper.isFieldValueWrapper)(result[field])) return acc;
    return _objectSpread(_objectSpread({}, acc), {}, (0, _defineProperty2.default)({}, field, getEscapedField(result, field)));
  }, {});
}

function Result(_ref) {
  var className = _ref.className,
      result = _ref.result,
      onClickLink = _ref.onClickLink,
      titleField = _ref.titleField,
      urlField = _ref.urlField,
      thumbnailField = _ref.thumbnailField,
      rest = (0, _objectWithoutProperties2.default)(_ref, _excluded);
  var fields = getEscapedFields(result);
  var title = getEscapedField(result, titleField);
  var url = (0, _viewHelpers.getUrlSanitizer)(URL, location)(getRaw(result, urlField));
  var thumbnail = (0, _viewHelpers.getUrlSanitizer)(URL, location)(getRaw(result, thumbnailField));
  return /*#__PURE__*/_react.default.createElement("li", (0, _extends2.default)({
    className: (0, _viewHelpers.appendClassName)("sui-result", className)
  }, rest), /*#__PURE__*/_react.default.createElement("div", {
    className: "sui-result__header"
  }, title && !url && /*#__PURE__*/_react.default.createElement("span", {
    className: "sui-result__title",
    dangerouslySetInnerHTML: {
      __html: title
    }
  }), title && url && /*#__PURE__*/_react.default.createElement("a", {
    className: "sui-result__title sui-result__title-link",
    dangerouslySetInnerHTML: {
      __html: title
    },
    href: url,
    onClick: onClickLink,
    target: "_blank",
    rel: "noopener noreferrer"
  })), /*#__PURE__*/_react.default.createElement("div", {
    className: "sui-result__body"
  }, thumbnail && /*#__PURE__*/_react.default.createElement("div", {
    className: "sui-result__image"
  }, /*#__PURE__*/_react.default.createElement("img", {
    src: thumbnail,
    alt: ""
  })), /*#__PURE__*/_react.default.createElement("ul", {
    className: "sui-result__details"
  }, Object.entries(fields).map(function (_ref2) {
    var _ref3 = (0, _slicedToArray2.default)(_ref2, 2),
        fieldName = _ref3[0],
        fieldValue = _ref3[1];

    return /*#__PURE__*/_react.default.createElement("li", {
      key: fieldName
    }, /*#__PURE__*/_react.default.createElement("span", {
      className: "sui-result__key"
    }, fieldName), " ", /*#__PURE__*/_react.default.createElement("span", {
      className: "sui-result__value",
      dangerouslySetInnerHTML: {
        __html: fieldValue
      }
    }));
  }))));
}

Result.propTypes = {
  result: _propTypes.default.object.isRequired,
  onClickLink: _propTypes.default.func.isRequired,
  className: _propTypes.default.string,
  titleField: _propTypes.default.string,
  urlField: _propTypes.default.string,
  thumbnailField: _propTypes.default.string
};
var _default = Result;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,